_malloc_alloc_template:
  private:
    static void * oom_alloc  (size_t sz);
    static void * oom_realloc(void *p, size_t new_size);
    static void   (*_malloc_alloc_oom_handler)();
  public:
    static void * allocate  (size_t sz);
    static void   deallocate(void *p, size_t /* sz */);
    static void * reallocate(void *p, size_t /* old_size */, size_t new_size);
    static void   (*set_malloc_handler(void (*f)()))();


_default_alloc_template:
  private:
    static size_t ROUND_UP(size_t n);
    static size_t FREELIST_INDEX(size_t bytes);
    static void * refill(size_t n);
    static char * chunk_alloc(size_t sz, int &nobjs);

    union obj { ... };
    enum { _ALIGN = 8 };
    enum { _MAX_BYTES = 128 };
    enum { _NFREELIST = _MAX_BYTES / _ALIGN };

    static obj * volatile free_list[...]
    static char *start_free;
    static char *end_free;
    static size_t heap_size;
  public:
    static void * allocate(size_t sz);
    static void   deallocate(void *p, size_t /* sz */);
    static void * reallocate(void *p, size_t /* old_size */, size_t new_size);
